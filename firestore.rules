rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow authenticated users to read and write to canvas shapes
    match /canvas/{canvasId}/shapes/{shapeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && request.auth.uid == request.resource.data.createdBy
        && validateShapeData();
      allow update: if request.auth != null 
        && (resource.data.isLocked == false || resource.data.lockedBy == request.auth.uid)
        && validateShapeUpdate();
      allow delete: if request.auth != null 
        && resource.data.isLocked == false;
    }
    
    // Validation functions
    function validateShapeData() {
      let data = request.resource.data;
      return data.keys().hasAll(['type', 'x', 'y', 'width', 'height', 'fill', 'createdBy', 'createdAt', 'lastModifiedBy', 'lastModifiedAt', 'isLocked']) &&
             data.type in ['rectangle', 'circle'] &&
             data.x is number && data.x >= 0 && data.x <= 5000 &&
             data.y is number && data.y >= 0 && data.y <= 5000 &&
             data.width is number && data.width > 0 && data.width <= 1000 &&
             data.height is number && data.height > 0 && data.height <= 1000 &&
             data.fill is string && data.fill.size() > 0 &&
             data.createdBy is string && data.createdBy.size() > 0 &&
             data.lastModifiedBy is string && data.lastModifiedBy.size() > 0 &&
             data.isLocked is bool &&
             // Optional text field validation
             (!data.keys().hasAny(['text']) || data.text is string) &&
             (!data.keys().hasAny(['textColor']) || data.textColor is string) &&
             (!data.keys().hasAny(['fontSize']) || (data.fontSize is number && data.fontSize > 0)) &&
             // Locking fields validation  
             (!data.keys().hasAny(['lockedBy']) || data.lockedBy == null || data.lockedBy is string) &&
             (!data.keys().hasAny(['lockedByName']) || data.lockedByName == null || data.lockedByName is string) &&
             (!data.keys().hasAny(['lockedByColor']) || data.lockedByColor == null || data.lockedByColor is string);
    }
    
    function validateShapeUpdate() {
      let existing = resource.data;
      let updated = request.resource.data;
      // Protect immutable fields from being changed
      return updated.type == existing.type &&
             updated.createdBy == existing.createdBy &&
             updated.createdAt == existing.createdAt;
      // Allow all other fields to be updated (x, y, width, height, fill, text, isLocked, etc.)
    }
  }
}
